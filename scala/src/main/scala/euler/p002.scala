package euler

import EulerTools.time

/**
  * https://projecteuler.net/problem=2
  *
  * Even Fibonacci numbers
  *
  * Problem 2
  * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
  * By starting with 1 and 2, the first 10 terms will be:
  *
  * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
  *
  * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
  * find the sum of the even-valued terms.
  */

object p002 extends App {

  time {

    val limit = 4000000 // "does not exceed 4M"

    // implementation from Scala Stream docs
    lazy val fibs: Stream[Int] = 0 #:: 1 #:: fibs.zip(fibs.tail).map(n => n._1 + n._2)


    // Get Fibonacci numbers until they exceed limit, filter for even and sum.

    val answer = fibs.takeWhile(_ <= limit).filter(_ % 2 == 0).sum
    println(answer)
    assert(answer == 4613732)

  }
}
